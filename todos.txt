NOTE: my to do list: 
01) implement the backend routes and controllers for the following requests: 
    01) list all the ads in our system under a list on the HomePage. --> a request which gets all the ads in the system. DONE
    02) set markers on the googlemaps API with all the ADS on our system, different mark for donationAd and different mark for WishListAd. 
    03) list all the donation ads for a specific user.
    04) list all the wishlist ads for a specific user.
    05) list all the claim requests for a specific user (all the claim requests for all his donationsAds).
    06) we would want to enable a user to create wishlist ads. 
    07) we would want to enable a user to create a donatio ads.
    08) we would want to display a leaderboard page which displays all users the top 20 users in the app sorted by their rating.
        01) we would like to enable an option to sort them by their badges type. (display all users with "generous badge" etc..)
    09) we would want to allow one user to rate other user after a donation ad was donated sucessfully.
    10) we would want to allow one user to rate other user after a wishlist ad promise was accepted by the user who created the wishlist ad, and the wish as been granted(donated). 
    11) we would like to enable the user to delete a donation ad. 
    12) we would like to enable the user to edit a donation ad details, edit the donation ad items, delete items. 
    13) we would like to enable the user to delete a wishlist ad.
    14) we would like to enable the user to edit a wishlist ad, edit its details, and its items, delete items from the wishlist.
    



client side:
01) learn all the necessary hooks.
02) check how to migrate to vite.
03) create a form that adds the user and not with the dummy button we did.
04) create a button for deleting a specific user.
05) create a form for updating a user.
06) when clicking on a user name, open a modal or anything else that will get the details of a single user.
07) learn about tanstack query and connect all of the endpoints you have done with fetch to it.
08) learn about redux. alternatively (preferred both) - learn about use context.

server side:
01) make more of these routes for user (*update get one etc.)
02) learn about ref in mongoose - when i want to connect one model to the other such as i am a user in facebook. 
03) and i created a post then in the post there wil be the id of the creator.
04) create validations in the controller (Via middlwware).
05) learn about hashing passwords with bcryptjs.
06) learn about JWT token and how to work with it in the client (httponlycookie).
06) learn about winston logger.


http://localhost:5000/api/users/:id/category/:category - example of multiple path params


NOTE FOCUS: 
    what needs to be done is: 
    01) to add the socket.io for real time updates of the list without the user need to refresh the page when a new ad creates. DONE
        01) first implement the backend routes and controllers for: 
            01) donation ad creation and make sure to emit event upon ad creation DONE 
            02) wishlist ad creation and make sure to emit event upon wishlist ad creation.DONE
        02) implement the frontend useState and useEffect like in socketIO repo example (create li components, and on the homePage.js to useCase and useEffect (listen to the backend events)) DONE
    02) frontend:
        01) implement a user registration page.DONE
        02) implement a user login page. DONE
        02) to attach add the middlewhere router to any protected route id like it to verify, so that only logged on users can browse the website DONE 
    03) backend: 
        01) implement the jwt and bycript logic.  DONE
        02) to attach add the middlewhere router to any routes id like to have user autentication over there - comeback to it only after i finish udimy course explainatipn.  
    04) must implement log out functionality which removes the JWT token from local storage once the user loges out. 

    05) add offer.js to the modal and have it store a ref to a wishlsit ad.

NOTE: ROUTES FOR base-ad-routes.js and base-ad-controller.js
NOTE baseAdController will function for both WishlistAd and DonationAd.
This is possible because WishlistAd and DonationAd are discriminators of the BaseAd model.
The logic in baseAdController.js works for both ad types because BaseAd.find(), BaseAd.findById(), and BaseAd.findByIdAndUpdate() target the ads collection, and both WishlistAd and DonationAd live in the same collection.
Reason	Why Itâ€™s Best Practice
Items Are Embedded	Items exist only inside BaseAd, so item logic should be in baseAd-controller.js.
Fewer Files	No need for an unnecessary item-controller.js.
Single Responsibility	BaseAd is responsible for its own items.
Avoid Query Overhead	Mongoose allows you to query sub-documents (BaseAd.items) directly.
Reusability	BaseAd-controller.js works for both DonationAd and WishlistAd.
Easier Maintenance	All item logic is in one file (baseAd-controller.js).
POST /api/ads/:adId/items
PATCH /api/ads/:adId/items/:itemId
DELETE /api/ads/:adId/items/:itemId
